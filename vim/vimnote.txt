ctrl-]  //标签跳转
ctrl-i  //下跳
ctrl-o  //跳回

:help   //help(F1)
:help x
:help {主题}
:help CTRL-A
:help E37   //查看报错帮助

:set compatible?    //检查vim是否正常
:scriptnames        //检查配置文件位置

:set showmode       //显示当前模式

J   //删除两行之间的回车符
u   //撤销操作（连按两次将文本还原）
U   //行撤销

9k  //向上移动9行（可在多个中命令前加数字）
3x

w   //向右移动一个单词
e   //向右移到一个单词尾部
b   //向左一定一个单词
ge  //向左移到一个单词尾部

0   //移动到行首
//20  //移动到下一行行首
^   //移动到一行的第一个非空字符
$   //移动到行尾
2$  //移到到下一行行尾

fx  //移动到x字符的位置(find x)（右边）
3fx //移动到第三个x字符的位置
Fx  //（左边）
tx  //与fx类似（to x）

%   //括号匹配

gg  //移动到文本首部
G   //移动到文本尾部

:set number     //显示行号
:set ruler      //显示光标坐标

CTRL-U      //向下滚半屏
CTRL-D

CTRL-E      //向上滚一行
CTRL-Y      //向下滚一行

CTRL-F      //向下滚一个屏幕（forward）
CTRL-B      //回滚一个屏幕(backward)

zz          //把光标所在行放在屏幕中间
zt          //屏幕顶部
zb          //屏幕底部

/string     //查找string（向下）
?string     //向上

:set ignorecase     //设置查找时不区分大小写
:set noignorecase

*       //移动到下一个此单词上(可使用n遍历)
#       //上一个

:set hlsearch   //高亮显示*查找单词
:set nohlsearch
:nohlsearch     //只去掉高亮

:set incsearch  //输入查找字符时显示匹配点

:set nowrapscan //查找到达文件最后时停止
:set wrapscan

Go          //组合命令，去到文件结尾并开始新的一行

/^string    //组合命令，匹配一行开始的string
/str.ng     //组合命令，其中.表示任意字符

/string\.   //组合命令，其中\可以去掉.的特殊意义，使其变成字符

23G ''      //组合命令，跳至23行，''表示跳回原处

d4w         //删除4个单词
daw         //删除当前整个单词
diw         //删除当前整个单词不包括空白字符
d$          //删到行尾

cw          //修改一个词（change）
c2wstring   //删除2个词插入string
cc          //修改一整行

~           //将光标下的字符修改大小写

A           //移动到行尾并启用插入模式
I           //移动到一个非空字符并启用插入模式

"==============================================================="

set nocompatiable                       "关闭vi兼容模式
set backspace=indent,eol,start          "允许在插入模式下使用backspace
set autoindent                          "开启新的一行时使用前一行的缩进

"--------------------------------------------------------------"
"当vim覆盖一个文件时保留一个备份，VMS系统除外
if has("vms")
    set nobackup
else
    set backup
endif
"--------------------------------------------------------------"

set history=50                          "保存50个查找模式的历史
set ruler                               "右下角显示光标位置
set showcmd                             "有下角显示未完成的命令
set incsearch                           "输入部查找时高亮显示

"--------------------------------------------------------------"
"这定义一个键映射，定义Q命令来完成gq
map Q gq
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"一个复杂的映射，在可视化模式下拷贝已选的文件并在C文件中查找它
vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"有彩色时或在gui_running时激活语法高亮
if &t_Co > 2 || has("gui_running")
    syntax on
    set hlsearch
endif
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"启动三个机制
"1.文件类型探测
"2.使用文件类型相关的插件
"3.使用缩进文件
filetype plugin indent on
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"自动命令，在纯文本文件中,一行长于78个字符的时候自动换行
"autocmd FileType text    当文档被设置为text的时候，自动执行setlocal textwidth=78
autocmd FileType text setlocal textwidth=78
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"自动命令，设置为在读入任何文件之后自动执行，后面的检查，'"标记是否已被定义，如果是，则跳转该标记。
"行首的反斜杠用于把所有语句连成一行
autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g'\"" |
    \ endif
"--------------------------------------------------------------"

"--------------------------------------------------------------"
"键盘映射，按下F5，等于按下i,输入{，按下esc，e，a，输入}，按下esc
:map <F5> i{<Esc>ea}<Esc>
"--------------------------------------------------------------"

:map                        //列出当前已定义的映射























